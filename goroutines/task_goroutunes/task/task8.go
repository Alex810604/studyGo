// 8. –ì–æ—Ä—É—Ç–∏–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π
// –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ—Ä—É—Ç–∏–Ω—É, –≤—ã—á–∏—Å–ª—è—é—â—É—é –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞,
// –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª—è–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π).

//		AddInt32(&var, delta) ‚Äî –∞—Ç–æ–º–∞—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é var –Ω–∞ delta.
//	üîπ StoreInt32(&var, value) ‚Äî –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç value –≤ var.
//	üîπ LoadInt32(&var) ‚Äî –∞—Ç–æ–º–∞—Ä–Ω–æ —á–∏—Ç–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ var.
//	üîπ CompareAndSwapInt32(&var, old, new) ‚Äî –∞—Ç–æ–º–∞—Ä–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç var, –µ—Å–ª–∏ –µ—ë —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ old.

package goroutine

import (
	"sync"
	"sync/atomic"
)

func NumberSquared(wg *sync.WaitGroup, result *int64, id int) {
	defer wg.Done()
	squared := int64(id * id)
	atomic.StoreInt64(result, squared)
}
